---
format: "html"
execute:
  echo: false
  warning: false
from: "markdown+emoji"
---

```{r setup}
# uncomment for development
library(tidyverse)
library(reactable)
library(ggiraph)
source(here::here("config/viz_config.R"))
source(here::here("R/quarto-utils.R"))
ggplot2::theme_set(theme_ts) # defined in viz_config
#params <- list(region = "Niederrhein")
```

```{r read-data}
tn_cfg <- readr::read_rds(here::here("config/tn_cfg.rds"))
tn <- readr::read_rds(here::here("data/cleaned/tn.rds"))
tn_data <- tn$data

og_cfg <- readr::read_rds(here::here("config/og_cfg.rds"))
og <- readr::read_rds(here::here("data/cleaned/og.rds"))
og_data <- og$data

# choices for some reordering 
og_choices <- readr::read_csv(here::here("data/meta/og_choices.csv"))
tn_choices <- readr::read_csv(here::here("data/meta/tn_choices.csv"))


```

```{r filter-region}
# FILTER
# TODO DOES NOT WORK
#og_f <- og$long |> map_df(function(df) {
#    df |> 
#        filter(og_region %in% og_ids)
#})

# get the ortsgruppen for this region
og_ids <- og_data |> 
    filter(og_region == params$region) |> 
    pull(og_id) |> 
    unique()

og_data_f <- og_data |> 
    filter(og_id %in% og_ids)

tn_data_f <- tn_data |> 
    filter(og_region == params$region)
```


::: {.callout-note collapse="true"}
## Datenquelle



Relevante Fragen:

- **Frage** `{r} fmt_source(og_cfg$Q_OG_REGION, "og")`
- **Frage** `{r} fmt_source(og_cfg$Q_OG_NAME, "og")`
- **Frage** `{r} fmt_source(tn_cfg$Q_OG_NAME, "tn")` 


Ortsgruppen, die von Teilnehmenden genannt werden, bekommen das Label "TN" in der Spalte `Datenquelle`. Ortsgruppen, für die der Ortsgruppen-Fragebogen ausgefüllt wurde, bekommen das Label "OG" in der Spalte `Datenquelle`. 
Beachte: Manche Ortsgruppen kommen nur im TN-Fragebogen vor, da die Ortsgruppenleitung den OG-Fragebogen nicht beantwortet hat

:::

::: callout-tip
Mit einem Klick auf den :arrow_forward: kannst du jede Region öffnen und eine Liste ihrer Ortsgruppen sehen.
:::

```{r table}
og_region_df <- og_data_f %>%
  #mutate(anzahl_aktive = anzahl_ma_leitung + anzahl_tn) %>% 
  filter(og_region == params$region) |> 
  mutate(OG = "OG-FB") %>% 
  dplyr::full_join(tn_data_f %>% distinct(og_region, og_name) %>% drop_na() %>% 
                     mutate(TN = "TN-FB")) %>% 
  unite(col = "Datenquelle", c("OG", "TN"), na.rm = TRUE, sep = ", ") %>% 
  rename(`Ortsgruppe` = og_name)


reactable::reactable(
  og_region_df |> 
    select(og_region, anzahl_insg, anzahl_ma_leitung, anzahl_tn, hat_probleme_tn_gewinnung, hat_hauptamt, auftritte)
)

```

```{r}
n_og_og <- nrow(og_data_f)
n_og_tn <- tn_data_f$og_name %>% unique() %>% length()

tn_tn <- nrow(tn_data_f)
tn_og <- sum(og_data_f$anzahl_tn, na.rm = T)

leitung_og <- sum(og_data_f$anzahl_ma_leitung, na.rm = T)
insgesamt_og <- sum(og_data_f$anzahl_insg, na.rm = T)
```

**Anzahl Ortsgruppen**

- `{r} n_og_tn` Anzahl von Antworten auf den `{r} fmt_fragebogen("og")`
- `{r} n_og_tn` Anzahl verschiedener Werte bei den Antworten zur Frage `{r} I(fmt_source(tn_cfg$Q_OG_NAME, "tn"))`

**Anzahl Aktive**

| Fragebogen                 | Teilnehmer\*innen | Leitung und Mitarbeitende | Insgesamt                                 |
|-----------------|-----------------|-----------------|----------------------|
| `{r} fmt_fragebogen("tn")` | `{r} tn_tn`[^1]   | *nicht abgefragt*         | *nicht errechenbar*                       |
| `{r} fmt_fragebogen("og")` | `{r} tn_og`       | `{r} leitung_og`          | `{r} sum(og_data_f$anzahl_insg, na.rm = T)` |

: Anzahl Aktive {#tbl-summary}
:::

[^1]: Anzahl der Antworten auf den `{r} I(fmt_fragebogen(type = "tn"))`


Es gibt **zwischen `{r} min(n_og_tn, n_og_og)` und `{r} max(n_og_tn, n_og_og)` Ortsgruppen.**

Insgesamt sind in den Ortsgruppen von TEN SING **`{r} insgesamt_og` Personen aktiv**.

Davon sind **zwischen `{r} min(tn_tn, tn_og)` und `{r} max(tn_tn, tn_og)` als Teilnehmer\*innen** engagiert.  **`{r} leitung_og`** Personen **arbeiten** für TEN SING oder engagieren sich **in der Leitung** einer Ortsgruppe.

## Ortsgruppengröße

::: panel-tabset
## Alle

Hier wird die Anzahl aller Aktiven betrachtet. Diese ist definiert als **Summe von Teilnehmer\*innen und Leitung und Mitarbeitenden**.

Im Durchschnitt hat eine TenSing-Ortsgruppe `{r} mean(og_data_f$anzahl_insg, na.rm = T) %>% round()` Aktive. Dabei ist die Spannbreite recht groß. Die kleinste Ortsgruppe hat `{r} min(og_data_f$anzahl_insg, na.rm = T)` Aktive, die größte widerrum `{r} max(og_data_f$anzahl_insg, na.rm = T)` Aktive.

```{r}
ggplot(og_data_f, aes(x = anzahl_insg))+
    geom_histogram(fill = TS_GREEN)+
    geom_vline(xintercept = mean(og_data_f$anzahl_insg, na.rm = TRUE), color = RED, linetype = 2)+
  geom_text(x = mean(og_data_f$anzahl_insg, na.rm = TRUE), hjust = -0.1, y = 5, label = paste("Mittelwert =", mean(og_data_f$anzahl_insg, na.rm = TRUE) %>% round(2)))+
    labs(x = "Anzahl Aktive", y = "Anzahl Gruppen", title = "Anzahl der Aktiven")
```

## Teilnehmer\*innen

Hier wird die Anzahl der **Teilnehmer\*innen** betrachtet: Im Durchschnitt hat eine TenSing-Ortsgruppe `{r} mean(og_data_f$anzahl_tn, na.rm = T) %>% round()` Teilnehmer\*innen (TN). Dabei ist die Spannbreite recht groß. Die kleinste Ortsgruppe hat `{r} min(og_data_f$anzahl_tn, na.rm = T)` TN, die größte widerrum `{r} max(og_data_f$anzahl_tn, na.rm = T)` TN.

```{r}
ggplot(og_data_f, aes(x = anzahl_tn))+
    geom_histogram(fill = TS_GREEN)+
    geom_vline(xintercept = mean(og_data_f$anzahl_tn, na.rm = TRUE), color = RED, linetype = 2)+
  geom_text(x = mean(og_data_f$anzahl_tn, na.rm = TRUE), nudge_x = 1, y = 5, label = paste("Mittelwert =", mean(og_data_f$anzahl_tn, na.rm = TRUE) %>% round(2)))+
    labs(x = "Anzahl Teilnehmer*innen", y = "Anzahl Gruppen", title = "Anzahl der Teilnehmer*innen")
```

## Mitarbeitende / Leitung

```{r}
ggplot(og_data_f, aes(x = anzahl_ma_leitung))+
    geom_histogram(fill = TS_GREEN)+
    geom_vline(xintercept = mean(og_data_f$anzahl_ma_leitung, na.rm = TRUE), color = RED, linetype = 2)+
  geom_text(x = mean(og_data_f$anzahl_ma_leitung, na.rm = TRUE),  nudge_x = -0.1, y = 5, label = paste("Mittelwert =", mean(og_data_f$anzahl_ma_leitung, na.rm = TRUE) %>% round(2)))+
    labs(x = "Anzahl Mitarbeitende/Leitung", y = "Anzahl Gruppen", title = "Anzahl der Mitarbeitenden/Leitung")
```
:::

::: {.callout-tip collapse="true"}
## Interpretationshilfe

Die Grafik zeigt auf der waagerechten Achse die Gruppengröße und auf der senkrechten Achse, wie viele Gruppen diese Gruppengröße haben. Die gestrichelte Linie zeigt die mittlere Gruppengröße an (Mittelwert).
:::

## Geschlecht

::: panel-tabset
## Alle

```{r}
gender_all <- og$long$gender_by_participant_type %>% 
  group_by(og_id, gender) %>% 
  summarize(n = sum(n))

og$long$gender_by_participant_type %>% 
  group_by(gender, person_type) %>% 
  summarize(n = sum(n)) %>% 
  mutate(label = paste("n =", n)) %>% 
  ggplot(aes(x = gender, y = n, fill = person_type, label = label))+
    geom_col(position = "stack")+
    geom_label(
      position = position_stack(vjust = 0.5),
      size = 3, fontface = "bold",
      ## turn into white box without outline
      fill = "white"
    ) +
    theme(legend.position = "bottom")+
    labs(fill = NULL, x = NULL, title = "Geschlecht")+
    scale_fill_manual(values = cols_4)

```

## Mitarbeitende (inkl. Leitung)

```{r}
PLACEHOLDER_PLOT
```

## Teilnehmende

```{r}
PLACEHOLDER_PLOT
```
:::

## Alter

::: panel-tabset
## Alle

```{r}
alter_by_person <- og$long$alter_by_participant_type

# for reordering
alter_choices <- og_choices %>% 
  filter(label %in% c(alter_by_person$alter %>% unique())) %>% 
  mutate(order = 1:n()) %>% 
  select(label, order)

color_values <- set_names(cols_4, alter_choices$label)

alter_by_person %>% 
  left_join(alter_choices, by = c("alter" = "label")) %>% 
  group_by(person_type) %>% 
  mutate(person_n = sum(n, na.rm = TRUE)) %>% 
  group_by(person_type, alter, order, person_n) %>% 
  summarize(n = sum(n, na.rm = TRUE)) %>% 
  mutate(perc = round(n * 100 / person_n, 2),
         label = paste0(n, "\n", perc, "%"))  %>%
  ungroup() %>% 
  arrange(person_type, order) %>% 
  ggplot()+
    geom_col(aes(y = person_type, x = n, group = fct_reorder(alter, -order), stat = "identity", fill = alter), position = "stack")+
    theme(legend.position = "bottom")+
    labs(fill = NULL, x = NULL, y = NULL, title = "Anzahl Aktive nach Altersgruppen")+
  geom_label(
      aes(y = person_type, x = n, label = label),
      position = position_stack(vjust = 0.5),
      size = 3, fontface = "bold",
      ## turn into white box without outline
      fill = "white"
    ) +
  scale_fill_manual(values = color_values, breaks = og_choices$label)+
  guides(fill = guide_legend(nrow = 2))
```

## Mitarbeitende (inkl. Leitung)

```{r}
PLACEHOLDER_PLOT
```

## Teilnehmende

```{r}
PLACEHOLDER_PLOT
```
:::




# Bedarfe von Teilnehmenden
**TODO**

### Wie viele TN an der Umfrage übernehmen Verantwortung?

### Warum übernehmen Jugendliche Verantwortung in Ten Sing (z. B. Gremien)? Was verhindert das bzw. was muss gegeben sein?


# Bedarfe von Ortsgruppen

::: {.panel-tabset}

```{r}
# get values
order_df <- og_choices %>% 
  filter(list_name %in% og_cfg$QS_UNTERSTUETZUNGSBEDARFE$select_from_list_name) %>% 
  mutate(order = c(1:2, 4:5, 3)) %>% 
  select(order, bedarf_value = label) %>% 
  arrange(order)

unterst_long_plotdata <- og$long$unterstuetzungsbedarfe %>% 
  left_join(order_df) %>% 
  add_count(bedarf, name = "n_antwort") %>% 
  count(bedarf, n_antwort, bedarf_value, order, .drop = FALSE) %>% 
  mutate(prop = n / n_antwort) 

```

::: {.callout-note collapse="true"}

## Datenquelle

**Frage:** `{r} fmt_source(og_cfg$Q_BEGIN_UNTERSTUETZUNGSBEDARFE, "og")`

Spalten im Roh-Datensatz:

```{r}
og_cfg$QS_UNTERSTUETZUNGSBEDARFE %>% pull(col_name)
```
:::

## Balkendiagramm


```{r}
#| out-width: "100%"
#| fig-width: 8


# long format 
p <- ggplot(unterst_long_plotdata, aes(fill = bedarf_value, y = bedarf, x = prop, tooltip = paste0(bedarf, "\n", bedarf_value, ": ", round(prop * 100), "% der Ortsgruppen")))+
  geom_col_interactive(position = position_stack(reverse = TRUE))+
  scale_x_continuous(labels = scales::percent)+
  scale_y_discrete(labels = scales::label_wrap(30))+
  scale_fill_manual_interactive(labels = order_df$bedarf_value, values = hcl.colors(5, "Purple-Green"))+
  labs(fill = NULL, y = NULL, x = "% der Ortsgruppen", title = "Unterstützungsbedarfe in den Ortsgruppen")+
  theme(legend.position = "top", axis.text.y = element_text(size = 12))

ggiraph::girafe(ggobj = p)
```
## Heatmap

```{r}

  
p_unterst_heatmap <-
  ggplot(
    unterst_long_plotdata,
    aes(
      y = bedarf,
      x = fct_reorder(bedarf_value, order),
      group = bedarf_value,
      fill = prop * 100,
      label = scales::percent(prop, accuracy = 1)
    )
  ) +
  geom_tile() +
  scale_y_discrete(labels = scales::label_wrap(30))+
  geom_text(color = "white", size = 3) +
  scale_fill_continuous(limits = c(0, 100)) +
  labs(y = NULL, x = NULL, title = "Unterstützungsbedarfe in den Ortsgruppen", fill = "% der Ortsgruppen") +
  theme(legend.position = "bottom")

ggiraph::girafe(ggobj = p_unterst_heatmap)
```

:::



::: {.callout-tip appearance="simple" collapse="true"}

## Weitere Unterstützungsbedarfe (offene Antworten):

```{r}
#| results: asis
answers <- og_data %>% 
  filter(!is.na(unterstuetzungsbedarfe_weitere)) %>% 
  pull(unterstuetzungsbedarfe_weitere)
cat(paste("- ", answers, collapse = "\n"))
```

:::

## Teilnehmendengewinnung
::: {.panel-tabset}

```{r}
# get labels for sorting in the plots
order_df <- og_choices %>% 
  filter(list_name %in% og_cfg$Q_TN_GEWINNUNG_PROB$select_from_list_name) %>% 
  mutate(order = rev(1:n())) %>% 
  select(order, hat_probleme_tn_gewinnung = label) %>% 
  arrange(order)

tng_prob <- og_data %>% 
  left_join(order_df, by = "hat_probleme_tn_gewinnung")
```
## Balkendiagramm

```{r}
ggplot(tng_prob, aes(x = fct_reorder(hat_probleme_tn_gewinnung, order), fill = fct_reorder(hat_probleme_tn_gewinnung, order)))+
  geom_bar()+
  scale_fill_manual(guide = "none", values = fct_rev(PAL_AMPEL))+
  scale_x_discrete(guide = guide_axis(angle = 45))+
  scale_y_continuous(breaks = scales::breaks_pretty())+
  labs(x = NULL, title = "Probleme bei der Gewinnung von Teilnehmenden", y = "Anzahl Ortsgruppen", fill = NULL)
```



## Kuchendiagramm

```{r}
tng_pc <- og_data %>%
  left_join(order_df, by = "hat_probleme_tn_gewinnung") %>% 
  get_pie_chart_data(order)

# TODO Fix label positions (due to fct_reorder)
ggplot(tng_pc, aes(x = "", y = n, fill = as.character(order))) +
  geom_col() +
  ggrepel::geom_label_repel(
    aes(y = pos, label = paste0(perc, "%")),
    size = 4.5,
    nudge_x = 1,
    show.legend = FALSE
  ) +
  scale_fill_manual(values = fct_rev(PAL_AMPEL), labels = order_df$hat_probleme_tn_gewinnung) + 
  labs(title = "Probleme bei der Gewinnung von Teilnehmenden",
       x = NULL,
       y = NULL, 
       fill = NULL) +
  theme(panel.grid = element_blank(),
        axis.text.x = element_blank()) +
  coord_polar(theta = "y")
```

## Daten Ortsgruppen

```{r}
og_data %>% 
  select(og_name, og_region, hat_probleme_tn_gewinnung, anzahl_tn) %>% 
  reactable(
    columns = list(
      og_name = colDef("Ortsgruppe", filterable = TRUE),
      og_region = colDef("Region", filterable = TRUE),
      hat_probleme_tn_gewinnung = colDef("Probleme?", filterable = TRUE),
      anzahl_tn = colDef("Anzahl TN")
    ), sortable = TRUE)
```

:::


### Wie sind die Teilnehmenden zu TEN SING gekommen?

::: {.callout-note collapse="true"}
## Datenquelle

**Frage**: `{r} fmt_source(tn_cfg$Q_ZUGANGSWEGE, "tn")` 


:::


```{r}
# shorter labels are necessary for the plot
zugang_choices <- tn_choices %>% 
  filter(list_name == tn_cfg$Q_ZUGANGSWEGE$select_from_list_name) %>% 
  mutate(label_manual = tn_cfg$LABEL_ZUGANGSWEGE) %>% 
  mutate(label_short = str_to_title(str_replace_all(name, "_", " ")))

zugang_df <- tn$long$zugangsweg %>% 
  left_join(zugang_choices, by = c("zugangsweg" = "label")) %>% 
  full_join(tn_data %>% select(tn_id) %>% filter(!tn_id %in% tn$long$zugangsweg$tn_id)) %>%  # add people who did not answer for proper calculation of percentages 
  tidyr::replace_na(list(label_short = "keine Angabe"))
```


::: {.panel-tabset}

## Balkendiagramm

```{r}
zugang_prop <- zugang_df %>% 
  group_by(zugangsweg, label_short, label_manual) %>% 
  summarize(prop = round(n() / nrow(tn_data), 2)) 


p <- ggplot(zugang_prop, aes(y = fct_reorder(str_wrap(label_short, 20), prop), group = zugangsweg, x = prop, tooltip = paste0(zugangsweg, "\n", prop * 100, "%"))) +
  geom_col_interactive(fill = TS_GREEN)+
  scale_x_continuous(label = scales::label_percent(), limits = c(0, 1))+
  labs(y = NULL, x = "% der Teilnehmenden", caption = paste0("% summieren nicht zu 100, da Mehrfachauswahl möglich.\n"), title = "Zugangswege für Teilnehmende")

ggiraph::girafe(ggobj = p)
```

::: {.callout-tip}
## Interpretationshilfe

- y-Achse/senkrechte Achse: Antwortoptionen, die ausgewählt werden konnten. 
- x-Achse/waagerechte Achse: Prozentzahl der Teilnehmer\*innen, die diese Option als _eine ihrer Antworten_ ausgewählt haben. 

Es handelt sich um eine Multiple-Choice Frage, das heißt, Teilnehmende konnten mehrere Optionen auswählen. Das ist der Grund, wieso sich die Prozentzahlen nicht auf 100%, sondern auf `{r} sum(zugang_prop$prop) * 100`% summieren. 

```{r}
example_proz <- zugang_prop %>% 
  filter(label_short == "Andere Person") %>% 
  pull(prop)
example_proz <- example_proz * 100

```

**Beispielinterpretation**: `{r} example_proz`% der Teilnehmenden gaben **als einen** ihrer Zugangswege zu TEN SING an, von einer anderen Person mitgenommen worden zu sein. 

:::
## Zugangswege Antwortmuster - Top 10

```{r}
# Kombinationen von Zugangswegen
zugang_comb <- zugang_df %>% 
  group_by(tn_id) %>% 
  summarize(Antwortmuster = paste(label_short, collapse = ", ")) %>% 
  count(Antwortmuster, name = "Anzahl TN") %>% 
  arrange(desc(`Anzahl TN`)) %>% 
  mutate(Prozent = round(100 * (`Anzahl TN` / nrow(tn_data)), 2)) %>% 
  ungroup() 


ggplot(zugang_comb %>% slice_max(Prozent, n = 10), aes(y = fct_reorder(Antwortmuster, Prozent), x = Prozent))+
  geom_col(fill = TS_GREEN)+
  labs(title = "Top 10 Antwortmuster Zugangswege", y = NULL, x = "% der Teilnehmenden")
```

::: {.callout-tip}
## Interpretationshilfe

- y-Achse/senkrechte Achse: top 10 Kombinationen von Antwortoptionen, die zusammen ausgewählt wurden.
- x-Achse/waagerechte Achse: Prozentzahl der Teilnehmer*innen, die diese Optionen zusammen ausgewählt haben.


```{r}
example <- zugang_comb %>%
  slice_max(Prozent, n = 10) %>% 
  filter(str_detect(Antwortmuster, ",")) %>% 
  slice(1)

example_percent <- example$Prozent
n_options <- str_split(example$Antwortmuster, ",")[[1]] %>% length()
```

**Beispielinterpretation**: `{r} example_percent`% der Teilnehmenden gaben an, dass diese `{r} n_options` Zugangswege eine Rolle gespielt haben, wie sie zu TEN SING gekommen sind: `{r} example$Antwortmuster`

:::

## Zugangswege Antwortmuster - alle
```{r}
reactable::reactable(
  zugang_comb,
  columns = list(
    Prozent = colDef(format = colFormat(suffix = "%"))
  )
)
```

## Sonstige Zugangswege

Antworten aus dem offenen Textfeld werden noch zusammengefasst werden. 

```{r}
#| results: asis
#cat(fmt_vec_to_bullet_point(tn$long$zugangsweg$zugangsweg_sonst))
```




:::

### Maßnahmen 
::: {.callout-note collapse="true"}
## Datenquelle
**Frage:** `{r} fmt_source(og_cfg$Q_TN_GEWINNUNG_MASSNAHMEN, "og")`
:::

::: {.panel-tabset}

## Maßnahmen

```{r}
mass_choices <- og_choices %>% 
  filter(list_name == og_cfg$Q_TN_GEWINNUNG_MASSNAHMEN$select_from_list_name) %>% 
  mutate(label_short = str_to_title(str_replace_all(name, "_", " "))) %>% 
  select(name, label, label_short)

erfolg_choices <- og_choices %>% 
  filter(list_name == og_cfg$QS_TN_GEWINNUNG_MASSNAHMEN_ERFOLG$select_from_list_name[1]) %>% 
  mutate(erfolg = as.integer(name)) %>% 
  select(erfolg, erfolg_label = label)

mass_long <- og$long$tn_gewinnung_massnahmen %>% 
  left_join(og_data %>% select(og_id, hat_probleme_tn_gewinnung), by = "og_id") %>% 
  left_join(mass_choices, by = c("massnahme" = "label")) %>% 
  left_join(erfolg_choices)
```


```{r}
mass_count_agg <- mass_long %>% 
  filter(massnahme != "Insgesamt") %>% 
  count(massnahme, label_short)

p <- ggplot(mass_count_agg, aes(y = fct_reorder(label_short, n), x = n, tooltip = massnahme))+
  geom_col_interactive(fill = TS_GREEN)+
  labs(x = "Anzahl Ortsgruppen", y = NULL, title = "Maßnahmen zur Teilnehmendengewinnung", subtitle = "in den Ortsgruppen", 
       caption = "Mehrfachauswahl möglich")

girafe(ggobj = p)
```

## Erfolg der Maßnahmen

```{r}

mass_erfolg_agg <- mass_long %>% 
  filter(massnahme != "Insgesamt") %>% 
  left_join(mass_count_agg, by = c("massnahme", "label_short")) %>% 
  group_by(massnahme, label_short, n, erfolg, erfolg_label) %>% 
  summarize(n_erf = n()) %>% 
  mutate(perc = n_erf / n)


p <- mass_erfolg_agg %>% 
  ggplot(aes(fill = fct_reorder(erfolg_label, as.integer(erfolg)), y = fct_reorder(label_short, n),
             x = perc, tooltip = paste0(
    massnahme, "\nAntwortoption ", erfolg_label, ": ", round(perc * 100, 2), "%")
  ))+
  geom_col_interactive(position = position_stack(reverse = TRUE))+
  scale_x_continuous(labels = scales::label_percent())+
  scale_y_discrete(labels = scales::label_wrap(60))+
  scale_fill_manual_interactive(labels = erfolg_choices$erfolg_label, values = hcl.colors(6, "Purple-Green"))+
  labs(fill = NULL, y = NULL, x = NULL, title = "Erfolg der Maßnahmen zur TN-Gewinnung", subtitle = "in den Ortsgruppen")+
  theme(legend.position = "bottom", 
        axis.text.y = element_text(size = 12),
        legend.text = element_text(size = 10))

girafe(ggobj = p)
```

:::
